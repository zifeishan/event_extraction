deepdive {
  
  db.default {
    driver: "org.postgresql.Driver"
    url: "jdbc:postgresql://"${PGHOST}":"${PGPORT}"/"${DBNAME} # "
    user: ${PGUSER}
    password: ${PGPASSWORD}
    dbname: ${DBNAME}
    host: ${PGHOST}
    port: ${PGPORT}
  }

  # Put your variables here
  schema.variables {
    disaster_toll.is_true: Boolean
  }

  # Put your extractors here
  extraction.extractors {

    # Clean output tables of all extractors
    ext_clear_table {
      style: sql_extractor
      sql: """
        DELETE FROM disaster_mentions;
        DELETE FROM disaster_toll;
        DELETE FROM disaster_toll_features;
        """
    }

    # With a tsv_extractor, developers have to make sure arrays 
      # are parsable in the UDF. One easy way is to 
      # use "array_to_string(array, delimiter)" function by psql.
    ext_disaster {
      input: """
          SELECT  sentence_id, 
                  array_to_string(words, '~^~'), 
                  array_to_string(ner_tags, '~^~') 
          FROM    sentences
          """
      output_relation: "disaster_mentions"
      udf: pypy udf/ext_disaster.py
      dependencies: [ext_clear_table]
      input_batch_size: 4000
      before: udf/truncate.sh disaster_mentions
      style: tsv_extractor
      parallelism: ${PARALLELISM}
    }

    # With a tsv_extractor, developers have to make sure arrays 
      # are parsable in the UDF. One easy way is to 
      # use "array_to_string(array, delimiter)" function by psql.
    ext_toll {
      input: """
          SELECT  sentence_id, 
                  array_to_string(words, '~^~'), 
                  array_to_string(ner_tags, '~^~') 
          FROM    sentences
          """
      output_relation: "toll_mentions"
      udf: pypy udf/ext_toll.py
      before: udf/truncate.sh toll_mentions
      dependencies: [ext_clear_table]
      input_batch_size: 4000
      style: tsv_extractor
      parallelism: ${PARALLELISM}
    }


    ext_disaster_toll_candidates {
      input: """
       SELECT p1.sentence_id,
              p1.mention_id, p1.text, 
              p2.mention_id, p2.text
        FROM  disaster_mentions p1, 
              toll_mentions p2
        WHERE p1.sentence_id = p2.sentence_id
          AND p1.mention_id != p2.mention_id;
          """
      output_relation: "disaster_toll"
      before: udf/truncate.sh disaster_toll
      udf: pypy udf/ext_disaster_toll.py
      dependencies: [ext_disaster ext_toll]
      style: tsv_extractor
    }

    ext_disaster_toll_manual_labels {
      style: cmd_extractor
      cmd: "udf/execute_sql.sh data/hand-label-disaster_toll.sql"
      dependencies: [ext_disaster_toll_candidates]

    }

    ext_disaster_toll_features {
      input: """
        SELECT  array_to_string(words, '~^~'), 
                disaster_toll.relation_id, 
                p1.start_position, 
                p1.length, 
                p2.start_position, 
                p2.length,
                lemma
        FROM    disaster_toll, 
                disaster_mentions p1, 
                toll_mentions p2, 
                sentences
        WHERE   disaster_toll.disaster_id = p1.mention_id 
          AND   disaster_toll.toll_id = p2.mention_id 
          AND   disaster_toll.sentence_id = sentences.sentence_id;
        """
      output_relation: "disaster_toll_features"
      before: udf/truncate.sh disaster_toll_features
      udf: pypy udf/ext_disaster_toll_features.py
      # udf: ${DEEPDIVE_HOME}/util/extractor_input_writer.py data/sample-ext_disaster_toll_features.tsv
      dependencies: [ext_disaster_toll_candidates]
      style: tsv_extractor
    }

  }

  inference.factors: { 

    # We require developers to select: 
    #   - reserved "id" column, 
    #   - variable column, 
    #   - weight dependencies,
    # for variable tables.
    f_disaster_toll_features {
      input_query: """
        SELECT  disaster_toll.id AS "disaster_toll.id", 
                disaster_toll.is_true AS "disaster_toll.is_true", 
                feature 
        FROM    disaster_toll, 
                disaster_toll_features 
        WHERE   disaster_toll_features.relation_id = disaster_toll.relation_id
        """
      function: "IsTrue(disaster_toll.is_true)"
      weight: "?(feature)"
    }

    f_disaster_toll_symmetry {
      input_query: """
        SELECT  r1.is_true AS "disaster_toll.r1.is_true", 
                r2.is_true AS "disaster_toll.r2.is_true", 
                r1.id AS "disaster_toll.r1.id", 
                r2.id AS "disaster_toll.r2.id"
        FROM    disaster_toll r1, 
                disaster_toll r2 
        WHERE   r1.person1_id = r2.person2_id 
          AND   r1.person2_id = r2.person1_id
          """
      function: "Equal(disaster_toll.r1.is_true, disaster_toll.r2.is_true)"
      # weight: "10" # We are pretty sure about this rule
      weight: "?" # We are pretty sure about this rule
    }

  }

  # # An example of how to use the last factor graph!
  # pipeline.relearn_from: ${DEEPDIVE_HOME}"/out/2014-04-19T190341/"

  pipeline.run: nonlp
  pipeline.pipelines.nonlp: [
    # ext_clear_table,
    # ext_disaster,
    # ext_toll,
    # ext_disaster_toll_candidates,
    ext_disaster_toll_manual_labels,
    ext_disaster_toll_features,
    f_disaster_toll_features,
    # f_disaster_toll_symmetry
    ]

  # Specify a holdout fraction
  # calibration.holdout_fraction: 0.25
  calibration.holdout_fraction: 0.0
  # sampler.sampler_args: "-l 1000 -s 1 -i 1000 --alpha 0.1 --diminish 0.99"

}
